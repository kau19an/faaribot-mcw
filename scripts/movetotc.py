import pywikibot, json
from pywikibot.page import Page

# TODO: Na parte da busca por redirecionamentos afluentes, o script deve manter o que h√° ap√≥s as hashtags encontradas. Ou seja: se for "#REDIRECIONAMENTO [[Po√ß√£o arremess√°vel#N√£o fabric√°vel]]", ele n√£o pode simplesmente mover para "#REDIRECIONAMENTO [[Po√ß√£o Arremess√°vel]]", mas sim, "#REDIRECIONAMENTO [[Po√ß√£o Arremess√°vel#N√£o fabric√°vel]]".
# TODO: Verificar se o redirecionamento buscado tamb√©m n√£o possui subp√°ginas a serem alteradas. Por exemplo, ao mover "Fogo de artif√≠cio" para "Fogo de Artif√≠cio", foi encontrado "Fogos de Artif√≠cio" e o script o moveu corretamente, mas n√£o percebeu que ele tamb√©m tinha uma subp√°gina "Fogos de Artif√≠cio/ED", ainda mantendo esse redirecionamento duplo.

# Fazer conex√£o com a Wiki
site = pywikibot.Site('pt', 'mcw')
site.login()

# L√™ a lista de p√°ginas a serem movidas em pares
# - √Ä esquerda: o termo sem title-case;
# - √Ä direita: o termo com title-case.
with open("scripts/data/movetotc.json", encoding="utf-8") as f:
    pares = json.load(f)

# Verifica se h√° pelo menos uma p√°gina presente na lista
if not pares:
    print('‚õî A lista est√° vazia. Adicione p√°ginas antes de executar o script.')
    exit()

# Define as mensagens que aparecer√£o nas mudan√ßas recentes da Wiki
resumo_deletar = 'Eliminada para mover "[[{orig}]]"'
resumo_mover = 'Tradu√ß√£o oficial do jogo passou a usar "title-case".'

for origem_titulo, destino_titulo in pares.items():
    # Verifica√ß√µes iniciais
    if not origem_titulo.strip() or not destino_titulo.strip():
        print(f'\n‚õî Par inv√°lido encontrado: "{origem_titulo}": "{destino_titulo}". Nenhum dos dois pode estar vazio. Corrija-o(s) na lista e tente novamente.')
        continue

    if origem_titulo == destino_titulo:
        print(f'\n‚õî A p√°gina de destino especificada para "{origem_titulo}" tem o mesmo nome. Corrija-a na lista e tente novamente.')
        continue

    origem = Page(site, origem_titulo)
    destino = Page(site, destino_titulo)

    print(f'\nüîÅ Processando: "{origem_titulo}" ‚Üí "{destino_titulo}"')

    if not origem.exists():
        print(f'\n‚ùå A p√°gina de origem n√£o existe. Pulando.')
        continue

    if destino.exists():
        try:
            print(f'\nüóëÔ∏è  Deletando a p√°gina: "{destino_titulo}"')
            destino.delete(
                reason=resumo_deletar.format(orig=origem_titulo),
                prompt=False
            )
        except Exception as e:
            print(f'\n‚ùó Erro ao deletar: {e}')
            continue

    try:
        print(f'\n‚û°Ô∏è  Movendo a p√°gina...')
        origem.move(
            newtitle=destino.title(),
            reason=resumo_mover,
            movetalk=True,     # Move todas as discuss√µes
            movesubpages=True, # Move todas as subp√°ginas
            noredirect=False   # Mant√©m o redirecionamento
        )
        print(f'\n‚úÖ Sucesso ao mover!')
    except Exception as e:
        print(f'\n‚ùó Erro ao mover: {e}')
        continue

    # Atualizar os redirecionamentos que apontavam para a origem
    print(f'\nüîç Buscando por redirecionamentos que apontam para "{origem_titulo}"...')
    redirs = origem.getReferences(filter_redirects=True, follow_redirects=False)

    for redir in redirs:
        try:
            if redir.isRedirectPage():
                alvo_anterior = redir.getRedirectTarget().title()
                redirect_antigo = Page(site, redir.title())
                redirect_antigo.text = f'#REDIRECIONAMENTO [[{destino_titulo}]]'
                redirect_antigo.save(
                    summary=f'Alvo de redirecionamento alterado de [[{alvo_anterior}]] para [[{destino_titulo}]]'
                )
                print(f'\nüîÑ Redirecionamento atualizado: "{redirect_antigo.title()}" ‚Üí "{destino_titulo}"')
        except Exception as e:
            print(f'‚ùó Erro ao atualizar o redirecionamento "{redir.title()}": {e}')

    print('\n----------') # Separador